FROM scratch AS build-base
ARG VERSION
ARG MRUSTC_VERSION
COPY --from=stagex/core-filesystem . /
COPY --from=stagex/core-busybox . /
COPY --from=stagex/core-binutils . /
COPY --from=stagex/core-bash . /
COPY --from=stagex/core-make . /
COPY --from=stagex/core-cmake . /
COPY --from=stagex/core-python . /
COPY --from=stagex/core-py-setuptools . /
COPY --from=stagex/core-zlib . /
COPY --from=stagex/core-pkgconf . /
COPY --from=stagex/core-openssl . /
COPY --from=stagex/core-perl . /
COPY --from=stagex/core-gcc . /
COPY --from=stagex/core-curl . /
COPY --from=stagex/core-libunwind . /
COPY --from=stagex/core-musl . /
FROM build-base AS build-mrustc
COPY --from=stagex/core-llvm13 . /
ADD fetch/mrustc-${MRUSTC_VERSION}.tar.gz .
RUN mv lrvick-mrustc-* mrustc
WORKDIR mrustc
ADD gcc_version.patch .
COPY fetch/rustc-1.54.0-src.tar.gz .
RUN <<-EOF
	set -eux
	export ARCH="$(uname -m)"
	export MRUSTC_TARGET_VER=1.54
	export RUSTC_VERSION=1.54.0
	export MRUSTC_DEBUG=Expand
	export MRUSTC_DUMP_PROCMACRO=dump_prefix
	export RUSTC_INSTALL_BINDIR=bin
	export OUTDIR_SUF=
	export RUSTC_TARGET="${ARCH}-unknown-linux-musl"
	patch -p1 < gcc_version.patch
	make -j "$(nproc)"
	make -j "$(nproc)" -f minicargo.mk LIBS
	make -j "$(nproc)" test local_tests
	make -j "$(nproc)" -f minicargo.mk LLVM_CONFIG=/usr/bin/llvm-config output/rustc
	make -j "$(nproc)" -f minicargo.mk LLVM_CONFIG=/usr/bin/llvm-config output/cargo
	make -j "$(nproc)" -C run_rustc LLVM_CONFIG=/usr/bin/llvm-config
	mkdir ../rust-1.54.0
	cp -R run_rustc/output/prefix ../rust-1.54.0/usr
EOF

FROM build-base AS build-script
ENV CONFIGURE_FLAGS=
COPY <<-'EOF' build.sh
	set -eux
	VERSION=${1}
	BUILD_VERSION=${2}
	TOOLS=${3:-cargo}
	PATCHES=${4:-}
	ARCH="$(uname -m)"
	PREFIX=/rust-${VERSION}/usr
	BUILD_PREFIX=/rust-${BUILD_VERSION}/usr
	#HACK because rust build seemindly ignores LD_LIBRARY_PATH
	cp ${BUILD_PREFIX}/lib/rustlib/${ARCH}-unknown-linux-musl/lib/*.so /usr/lib
	cd rustc-${VERSION}-src
	[[ -z "$PATCHES" ]] || for name in ${PATCHES//,/ }; do
		patch -p1 < ../${name}.patch
	done
	./configure \
		--enable-local-rust \
		--build="$(uname -m)-unknown-linux-musl" \
		--host="$(uname -m)-unknown-linux-musl" \
		--target="$(uname -m)-unknown-linux-musl" \
		--llvm-root="/usr/lib" \
		--disable-docs \
		--tools="${TOOLS}" \
		--enable-llvm-link-shared \
		--enable-option-checking \
		--enable-locked-deps \
		--enable-vendor \
		--dist-compression-formats=gz \
		--python="python3" \
		--local-rust-root="${BUILD_PREFIX}" \
		--prefix="${PREFIX}/usr" \
		--sysconfdir="${PREFIX}/etc" \
		--release-channel="stable" \
		--set="install.prefix=${PREFIX}" \
		--set="build.extended=true" \
		--set="rust.musl-root=/usr" \
		--set="rust.backtrace-on-ice=true" \
		--set="rust.codegen-units=1" \
		--set="rust.codegen-units-std=1" \
		--set="rust.deny-warnings=false" \
		--set="rust.parallel-compiler=false" \
		--set="rust.remap-debuginfo=true" \
		--set="rust.llvm-libunwind=system" \
		--set="build.full-bootstrap=true" \
		--set="target.${ARCH}-unknown-linux-musl.crt-static=false" \
		--set="target.${ARCH}-unknown-linux-musl.musl-root=/usr" \
		--set="target.${ARCH}-unknown-linux-musl.llvm-config=/usr/bin/llvm-config" \
		--set="target.${ARCH}-unknown-linux-musl.cc=cc" \
		--set="target.${ARCH}-unknown-linux-musl.cxx=c++" \
		--set="target.${ARCH}-unknown-linux-musl.ar=ar" \
		--set="target.${ARCH}-unknown-linux-musl.linker=cc" \
		$CONFIGURE_FLAGS
	python3 x.py dist
	python3 x.py install
EOF

FROM build-script AS build-llvm13
COPY --from=stagex/core-llvm13 . /
COPY --from=build-mrustc /rust-1.54.0 /rust-1.54.0
ADD fetch/rustc-1.55.0-src.tar.gz .
RUN sh build.sh 1.55.0 1.54.0

ADD fetch/rustc-1.56.0-src.tar.gz .
RUN sh build.sh 1.56.0 1.55.0

ADD fetch/rustc-1.57.0-src.tar.gz .
RUN sh build.sh 1.57.0 1.56.0

ADD fetch/rustc-1.58.0-src.tar.gz .
RUN sh build.sh 1.58.0 1.57.0

ADD fetch/rustc-1.59.0-src.tar.gz .
RUN sh build.sh 1.59.0 1.58.0

ADD fetch/rustc-1.60.0-src.tar.gz .
RUN sh build.sh 1.60.0 1.59.0

ADD fetch/rustc-1.61.0-src.tar.gz .
RUN sh build.sh 1.61.0 1.60.0

ADD fetch/rustc-1.62.0-src.tar.gz .
RUN sh build.sh 1.62.0 1.61.0

ADD fetch/rustc-1.63.0-src.tar.gz .
RUN sh build.sh 1.63.0 1.62.0

ADD fetch/rustc-1.64.0-src.tar.gz .
RUN sh build.sh 1.64.0 1.63.0

ADD fetch/rustc-1.65.0-src.tar.gz .
RUN sh build.sh 1.65.0 1.64.0

ADD fetch/rustc-1.66.0-src.tar.gz .
RUN sh build.sh 1.66.0 1.65.0

ADD fetch/rustc-1.67.0-src.tar.gz .
RUN sh build.sh 1.67.0 1.66.0

ADD fetch/rustc-1.68.0-src.tar.gz .
RUN sh build.sh 1.68.0 1.67.0

FROM build-script AS build-llvm16
COPY --from=stagex/core-llvm16 . /
COPY --from=stagex/core-llvm13 /usr/lib/libLLVM-13.so /usr/lib/
COPY --from=build-llvm13 /rust-1.68.0 /rust-1.68.0
ADD fetch/rustc-1.69.0-src.tar.gz .
RUN sh build.sh 1.69.0 1.68.0

ADD fetch/rustc-1.70.0-src.tar.gz .
RUN sh build.sh 1.70.0 1.69.0

ADD fetch/rustc-1.71.0-src.tar.gz .
RUN sh build.sh 1.71.0 1.70.0

ADD fetch/rustc-1.72.0-src.tar.gz .
RUN sh build.sh 1.72.0 1.71.0

ADD fetch/rustc-1.73.0-src.tar.gz .
RUN sh build.sh 1.73.0 1.72.0

ADD fetch/rustc-1.74.0-src.tar.gz .
RUN sh build.sh 1.74.0 1.73.0

# HACK: Required by Rust 1.75.0
# https://github.com/rust-lang/rust/issues/117885
RUN mkdir -p $HOME/.cargo/registry/src/index.crates.io-6f17d22bba15001f/
ADD fetch/rustc-1.75.0-src.tar.gz .
RUN sh build.sh 1.75.0 1.74.0

ADD fetch/rustc-1.76.0-src.tar.gz .
RUN sh build.sh 1.76.0 1.75.0

ADD fetch/rustc-1.77.0-src.tar.gz .
RUN sh build.sh 1.77.0 1.76.0

FROM build-script AS build
# lld, ninja, ca-certificates required post-1.80
COPY --from=stagex/core-llvm . /
COPY --from=stagex/core-lld . /
COPY --from=stagex/core-samurai . /
COPY --from=stagex/core-ca-certificates . /
COPY --from=stagex/core-llvm16 /usr/lib/libLLVM-16.so /usr/lib/
COPY --from=build-llvm16 /rust-1.77.0 /rust-1.77.0
ADD fetch/rustc-1.78.0-src.tar.gz .
RUN sh build.sh 1.78.0 1.77.0

ADD fetch/rustc-1.79.0-src.tar.gz .
RUN sh build.sh 1.79.0 1.78.0

ADD fetch/rustc-1.80.0-src.tar.gz .
RUN sh build.sh 1.80.0 1.79.0

ENV CONFIGURE_FLAGS="--set=rust.lld=false --set=rust.use-lld=external"
ADD fetch/rustc-1.81.0-src.tar.gz .
RUN sh build.sh 1.81.0 1.80.0

ADD no-default-static.patch .
ADD fetch/rustc-1.82.0-src.tar.gz .
RUN sh build.sh 1.82.0 1.81.0 cargo,clippy,rustdoc,rustfmt,rust-demangler no-default-static

RUN <<-EOF
	ARCH="$(uname -m)"
	mv /rust-${VERSION} /rootfs
	cd /rootfs/usr/lib/rustlib
	rm install.log
	sort -o manifest-cargo manifest-cargo
	sort -o manifest-rustc manifest-rustc
	sort -o \
		manifest-rust-std-${ARCH}-unknown-linux-musl \
		manifest-rust-std-${ARCH}-unknown-linux-musl
	rm -f ${ARCH}-unknown-linux-musl/lib/self-contained/libunwind.a
EOF

FROM stagex/core-filesystem AS package
COPY --from=build /rootfs/ /
