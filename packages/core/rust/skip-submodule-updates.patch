From 30cf5ab94114752d3fe12dd6c7a4ec70d46f5325 Mon Sep 17 00:00:00 2001
From: "Lance R. Vick" <lance@distrust.co>
Date: Sat, 8 Mar 2025 04:25:56 -0800
Subject: [PATCH] fix: do not require submodules in tarball bootstrap

---
 src/bootstrap/src/core/config/config.rs | 3 +--
 src/bootstrap/src/lib.rs                | 3 +++
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/bootstrap/src/core/config/config.rs b/src/bootstrap/src/core/config/config.rs
index 0587408e987..b351bd207a7 100644
--- a/src/bootstrap/src/core/config/config.rs
+++ b/src/bootstrap/src/core/config/config.rs
@@ -2668,10 +2668,9 @@ pub fn git_config(&self) -> GitConfig<'_> {
     /// used instead to provide a nice error to the user if the submodule is
     /// missing.
     pub(crate) fn update_submodule(&self, relative_path: &str) {
-        if !self.submodules() {
+        if self.rust_info.is_from_tarball() || !self.submodules() {
             return;
         }
-
         let absolute_path = self.src.join(relative_path);
 
         // NOTE: The check for the empty directory is here because when running x.py the first time,
diff --git a/src/bootstrap/src/lib.rs b/src/bootstrap/src/lib.rs
index ccc115a279f..d317505496d 100644
--- a/src/bootstrap/src/lib.rs
+++ b/src/bootstrap/src/lib.rs
@@ -471,6 +471,9 @@ pub fn new(mut config: Config) -> Build {
     /// The given `err_hint` will be shown to the user if the submodule is not
     /// checked out and submodule management is disabled.
     pub fn require_submodule(&self, submodule: &str, err_hint: Option<&str>) {
+        if self.rust_info().is_from_tarball(){
+            return;
+        }
         // When testing bootstrap itself, it is much faster to ignore
         // submodules. Almost all Steps work fine without their submodules.
         if cfg!(test) && !self.config.submodules() {
-- 
2.39.5

