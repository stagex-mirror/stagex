FROM --platform=linux/386 stagex/bootstrap-stage2 AS build
ARG TARGETARCH
COPY <<-'EOF' /etc/profile
	[[ "$TARGETARCH" == "amd64" ]] \
		&& ARCH="x86_64" \
		&& LLVM_TARGETS="X86"
	[[ "$TARGETARCH" == "arm64" ]] \
		&& ARCH="aarch64" \
		&& LLVM_TARGETS="AArch64"
	export ARCH
	export LLVM_TARGETS
	export MAKEFLAGS="-j$(nproc)"
	export BUILD=i386-unknown-linux-musl
	export TARGET=${ARCH}-linux-musl
	export PATH=/usr/sbin:/usr/bin:/sbin:/bin
	export TZ=UTC
	export LANG=C.UTF-8
	export SOURCE_DATE_EPOCH=1
	export KCONFIG_NOTIMESTAMP=1
EOF
SHELL ["/bin/sh","-l","-c"]

ARG MUSL_VERSION
ADD fetch/musl-${MUSL_VERSION}.tar.gz /
WORKDIR /musl-${MUSL_VERSION}
RUN --network=none <<-EOF
	set -eux
	./configure \
		--prefix=/usr \
		--host=${TARGET}
	make DESTDIR=/rootfs install
EOF

ARG XZ_VERSION
ADD fetch/xz-${XZ_VERSION}.tar.gz /
WORKDIR /xz-${XZ_VERSION}
RUN --network=none <<-EOF
	set -eux
	autoreconf -fi
	./configure \
		--prefix=/usr \
		--host=${TARGET}
	make DESTDIR=/rootfs install
EOF

ARG LIBUCONTEXT_VERSION
ADD fetch/libucontext-${LIBUCONTEXT_VERSION}.tar.gz /
WORKDIR /libucontext-libucontext-${LIBUCONTEXT_VERSION}
RUN --network=none <<-EOF
	set -eux
	export CC=${ARCH}-linux-musl-gcc
	make ARCH=${ARCH} DESTDIR=/rootfs install
EOF

ARG LIBUNWIND_VERSION
ADD fetch/libunwind-${LIBUNWIND_VERSION}.tar.gz /
WORKDIR /libunwind-${LIBUNWIND_VERSION}
RUN <<-EOF
	set -eux
	export CFLAGS="-I/rootfs/usr/include -L/rootfs/usr/lib -L/usr/lib -L/lib -llzma -lucontext"
	export CXXFLAGS="$CFLAGS"
	export CPPFLAGS="$CFLAGS"
	autoreconf -i
	./configure \
		--prefix=/usr \
		--host=${TARGET} \
		--enable-cxx-exceptions || cat config.log
	make
	cp -a src/libunwind.* /rootfs/usr/lib/
EOF

ARG CMAKE_VERSION
ADD fetch/cmake-${CMAKE_VERSION}.tar.gz /
WORKDIR /cmake-${CMAKE_VERSION}/build
RUN --network=none <<-EOF
	set -eux
	export CXXFLAGS="-latomic"
	../configure \
		--prefix=/usr \
		--no-system-cppdap \
		--no-system-curl \
		-- \
		-DCMAKE_USE_OPENSSL=OFF
	make
	make DESTDIR=/rootfs install
EOF

ARG LLVM_VERSION
ADD fetch/llvm-${LLVM_VERSION}.tar.xz /
WORKDIR /llvm-project-${LLVM_VERSION}.src
RUN --network=none <<-EOF
	set -eux
	export PATH=/rootfs/usr/bin:/usr/bin:/usr/sbin
  export CC="gcc -m32"
  export CXX="g++ -m32"
	export CFLAGS=-m32
	export CXXFLAGS=-m32
	export LDFLAGS=-m32
	cmake \
		-B build \
		-S llvm \
		-Wno-dev \
		-DCMAKE_INSTALL_PREFIX=/usr/ \
		-DCMAKE_BUILD_TYPE=Release \
		-DLLVM_TARGETS_TO_BUILD="$LLVM_TARGETS" \
		-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
		-DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" \
		-DLLVM_BUILD_DOCS=OFF
#-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld"
	cmake --build build --parallel $(nproc)
	DESTDIR="/rootfs" cmake --install build
EOF

ARG MAKE_VERSION
ADD fetch/make-${MAKE_VERSION}.tar.gz /
WORKDIR /make-${MAKE_VERSION}
RUN --network=none <<-EOF
	set -eux
	../make-${MAKE_VERSION}/configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--prefix=/usr \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--disable-nls
	make -j$(nproc)
	make DESTDIR=/rootfs install
EOF

ARG BUSYBOX_VERSION
ADD fetch/busybox-${BUSYBOX_VERSION}.tar.bz2 /
WORKDIR /busybox-${BUSYBOX_VERSION}/build
RUN --network=none <<-EOF
    set -eux
    setConfs='
        CONFIG_LAST_SUPPORTED_WCHAR=0
        CONFIG_STATIC=y
    '
    unsetConfs='
        CONFIG_FEATURE_SYNC_FANCY
        CONFIG_FEATURE_HAVE_RPC
        CONFIG_FEATURE_INETD_RPC
        CONFIG_FEATURE_UTMP
        CONFIG_FEATURE_WTMP
    '
    make \
        -f ../Makefile \
        KBUILD_SRC=../ \
        CROSS_COMPILE=${TARGET}- \
        defconfig
    for conf in $unsetConfs; do
        sed -i \
            -e "s!^$conf=.*\$!# $conf is not set!" \
            .config
    done
    for confV in $setConfs; do
        conf="${confV%=*}"
        sed -i \
            -e "s!^$conf=.*\$!$confV!" \
            -e "s!^# $conf is not set\$!$confV!" \
            .config
        if ! grep -q "^$confV\$" .config; then
            echo "$confV" >> .config
        fi
    done
    make oldconfig CROSS_COMPILE=${TARGET}-
    for conf in $unsetConfs; do
        ! grep -q "^$conf=" .config
    done
    for confV in $setConfs; do
        grep -q "^$confV\$" .config
    done
    make -j$(nproc) CROSS_COMPILE=${TARGET}-
EOF

WORKDIR /linux-${LINUX_VERSION}
RUN --network=none <<-EOF
	set -eux
	make ARCH="$(echo ${TARGETARCH} | sed 's/amd64/x86_64/')" headers
	find usr/include -name '.*' -delete
	rm usr/include/Makefile
	rm usr/include/headers_check.pl
	cp -rv usr/include /build-linux
EOF

WORKDIR ${HOME}/go
RUN --network=none <<-EOF
	set -eux
	cd src
	GOROOT_BOOTSTRAP=/usr/lib/go \
	GOHOSTARCH=386 GOARCH=${TARGETARCH} \
	bash -- make.bash
EOF
RUN --network=none <<-EOF
	set -eux
	rm -rf src/testdata
	mkdir -p /rootfs/usr/lib/go
	cp bin/linux_${TARGETARCH}/* bin
	rm -rf bin/linux_${TARGETARCH}
	cp -a bin lib pkg src /rootfs/usr/lib/go
	mkdir -p /rootfs/usr/bin
	ln -s /usr/lib/go/bin/go /rootfs/usr/bin/go
	ln -s /usr/lib/go/bin/gofmt /rootfs/usr/bin/gofmt
EOF
RUN --network=none <<-EOF
	set -eux
	. /.env
	env -C /build-busybox make \
		CROSS_COMPILE=${TARGET}- \
		CONFIG_PREFIX=/rootfs \
		install
	env -C /build-musl make DESTDIR=/rootfs install
	env -C /build-binutils make DESTDIR=/rootfs install
	env -C /build-make make DESTDIR=/rootfs install
	env -C /build-gcc make DESTDIR=/rootfs install
	cp -Rv /build-linux/* /rootfs/usr/include/
	cd /rootfs/
	ln -sT /lib lib64
	mkdir -p etc tmp var/tmp
EOF

FROM scratch AS package
COPY --from=build /rootfs/ /
