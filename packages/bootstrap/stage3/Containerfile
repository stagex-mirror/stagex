FROM scratch AS build
ARG GCC_SOURCE
ARG GCC_VERSION
ARG LINUX_SOURCE
ARG LINUX_VERSION
ARG MUSL_SOURCE
ARG MUSL_VERSION
ARG BUSYBOX_SOURCE
ARG BUSYBOX_VERSION
ARG BINUTILS_SOURCE
ARG BINUTILS_VERSION
ARG MAKE_SOURCE
ARG MAKE_VERSION
ENV ARCH=x86_64
ENV BUILD=i386-unknown-linux-musl
ENV TARGET=${ARCH}-linux-musl
ENV HOST=${TARGET}
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV USER=user
ENV HOME=/home/${USER}
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV SOURCE_DATE_EPOCH=1
ENV KCONFIG_NOTIMESTAMP=1
ENV MUSL_DIR=${HOME}/build-musl
ENV LINUX_DIR=${HOME}/build-linux
ENV BINUTILS_DIR=${HOME}/build-binutils
ENV BUSYBOX_DIR=${HOME}/build-busybox
ENV MAKE_DIR=${HOME}/build-make
ENV GCC_DIR=${HOME}/build-gcc
WORKDIR /${HOME}
COPY --from=fetch . .
COPY --from=stagex/bootstrap-stage2 . /
RUN --network=none <<-EOF
	set -eux
	tar -xf ${LINUX_SOURCE}
	tar -kxf ${BINUTILS_SOURCE}
	tar -kxf ${GCC_SOURCE}
	tar -kxjf ${BUSYBOX_SOURCE}
	tar -kxzf ${MUSL_SOURCE}
	tar -kxzf ${MAKE_SOURCE}
EOF
WORKDIR /${MUSL_DIR}
RUN --network=none <<-EOF
	set -eux
    ls -lah /
	../musl-${MUSL_VERSION}/configure \
		--prefix=/usr \
		--build=${BUILD} \
		--host=${TARGET}
	make -j$(nproc)
EOF
WORKDIR /${BINUTILS_DIR}
RUN --network=none <<-EOF
	set -eux
	../binutils-${BINUTILS_VERSION}/configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--prefix=/usr \
		--bindir=/usr/bin \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--sysconfdir=/etc \
		--disable-nls \
		--disable-multilib \
		--disable-plugins \
		--disable-gprofng \
		--enable-64-bit-bfd \
		--enable-ld=default \
		--enable-install-libiberty \
		--enable-deterministic-archives
	make -j$(nproc)
EOF
WORKDIR /${MAKE_DIR}
RUN --network=none <<-EOF
	set -eux
	../make-${MAKE_VERSION}/configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--prefix=/usr \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--disable-nls
	make -j$(nproc)
EOF
WORKDIR /${GCC_DIR}
RUN --network=none <<-EOF
	set -eux
	cp ../*.tar.* ../gcc-${GCC_VERSION}
	env -C ${HOME}/gcc-${GCC_VERSION} ./contrib/download_prerequisites
	../gcc-${GCC_VERSION}/configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--target=${TARGET} \
		--prefix=/usr \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--libdir=/usr/lib \
		--disable-cet \
		--disable-fixed-point \
		--disable-libstdcxx-pch \
		--disable-multilib \
		--disable-libsanitizer \
		--disable-nls \
		--disable-werror \
		--enable-__cxa_atexit \
		--enable-default-pie \
		--enable-default-ssp \
		--enable-languages=c,c++ \
		--enable-link-serialization=2 \
		--enable-linker-build-id
	make -j$(nproc)
EOF
WORKDIR /${BUSYBOX_DIR}
RUN --network=none <<-EOF
    set -eux
    setConfs='
        CONFIG_LAST_SUPPORTED_WCHAR=0
        CONFIG_STATIC=y
    '
    unsetConfs='
        CONFIG_FEATURE_SYNC_FANCY
        CONFIG_FEATURE_HAVE_RPC
        CONFIG_FEATURE_INETD_RPC
        CONFIG_FEATURE_UTMP
        CONFIG_FEATURE_WTMP
    '
    make \
        -f ../busybox-${BUSYBOX_VERSION}/Makefile \
        KBUILD_SRC=../busybox-${BUSYBOX_VERSION} \
        CROSS_COMPILE=${TARGET}- \
        defconfig
    for conf in $unsetConfs; do
        sed -i \
            -e "s!^$conf=.*\$!# $conf is not set!" \
            .config
    done
    for confV in $setConfs; do
        conf="${confV%=*}"
        sed -i \
            -e "s!^$conf=.*\$!$confV!" \
            -e "s!^# $conf is not set\$!$confV!" \
            .config
        if ! grep -q "^$confV\$" .config; then
            echo "$confV" >> .config
        fi
    done
    make oldconfig CROSS_COMPILE=${TARGET}-
    for conf in $unsetConfs; do
        ! grep -q "^$conf=" .config
    done
    for confV in $setConfs; do
        grep -q "^$confV\$" .config
    done
    make -j$(nproc) CROSS_COMPILE=${TARGET}-
EOF
WORKDIR /${HOME}/linux-${LINUX_VERSION}
RUN --network=none <<-EOF
	set -eux
	make ARCH=${ARCH} headers
	find usr/include -name '.*' -delete
	rm usr/include/Makefile
	rm usr/include/headers_check.pl
	cp -rv usr/include ${LINUX_DIR}
EOF
RUN --network=none <<-EOF
	set -eux
	env -C ${BUSYBOX_DIR} make \
		CROSS_COMPILE=${TARGET}- \
		CONFIG_PREFIX=/rootfs \
		install
	env -C ${MUSL_DIR} make DESTDIR=/rootfs install
	env -C ${BINUTILS_DIR} make DESTDIR=/rootfs install
	env -C ${MAKE_DIR} make DESTDIR=/rootfs install
	env -C ${GCC_DIR} make DESTDIR=/rootfs install
	cp -Rv ${LINUX_DIR}/* /rootfs/usr/include/
	cd /rootfs/
	ln -sT /lib lib64
	mkdir -p etc tmp var/tmp home/user
	echo "user:x:1000:" > etc/group
	echo "user:x:1000:1000::/home/user:/bin/sh" > etc/passwd
	chown -R 1000:1000 tmp var/tmp home/user
EOF

FROM scratch AS package
COPY --from=build /rootfs/ /
USER 1000:1000
ENTRYPOINT ["/bin/sh"]
ENV PS1="stage3 $ "
