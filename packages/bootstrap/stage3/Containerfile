FROM --platform=linux/386 stagex/bootstrap-stage2 AS build
ARG TARGETARCH
COPY <<-'EOF' /etc/profile
  set -eux
	[[ "$TARGETARCH" == "amd64" ]] \
		&& ARCH="x86_64"
	[[ "$TARGETARCH" == "arm64" ]] \
		&& ARCH="aarch64"
	export ARCH
	export MAKEFLAGS="-j$(nproc)"
	export BUILD=i386-unknown-linux-musl
	export TARGET=${ARCH}-linux-musl
EOF
SHELL ["/bin/sh","-l","-c"]
WORKDIR /rootfs/
RUN --network=none <<-EOF
	ln -sT /lib lib64
	mkdir -p etc tmp var/tmp
EOF

ARG MAKE_VERSION
ADD fetch/make-${MAKE_VERSION}.tar.gz /
WORKDIR /make-${MAKE_VERSION}
RUN --network=none <<-EOF
	../make-${MAKE_VERSION}/configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--prefix=/usr \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--disable-nls
	make
	make DESTDIR=/rootfs install
EOF

ARG BUSYBOX_VERSION
ADD fetch/busybox-${BUSYBOX_VERSION}.tar.bz2 /
WORKDIR /busybox-${BUSYBOX_VERSION}/build
RUN --network=none <<-EOF
	setConfs='
		CONFIG_LAST_SUPPORTED_WCHAR=0
		CONFIG_STATIC=y
	'
	unsetConfs='
		CONFIG_FEATURE_SYNC_FANCY
		CONFIG_FEATURE_HAVE_RPC
		CONFIG_FEATURE_INETD_RPC
		CONFIG_FEATURE_UTMP
		CONFIG_FEATURE_WTMP
	'
	make \
		-f ../Makefile \
		KBUILD_SRC=../ \
		CROSS_COMPILE=${TARGET}- \
		defconfig
	for conf in $unsetConfs; do
		sed -i \
			-e "s!^$conf=.*\$!# $conf is not set!" \
			.config
	done
	for confV in $setConfs; do
		conf="${confV%=*}"
		sed -i \
			-e "s!^$conf=.*\$!$confV!" \
			-e "s!^# $conf is not set\$!$confV!" \
		  .config
		if ! grep -q "^$confV\$" .config; then
			echo "$confV" >> .config
		fi
	done
	make oldconfig CROSS_COMPILE=${TARGET}-
	for conf in $unsetConfs; do
		! grep -q "^$conf=" .config
	done
	for confV in $setConfs; do
		grep -q "^$confV\$" .config
	done
	make CROSS_COMPILE=${TARGET}-
	make \
		CROSS_COMPILE=${TARGET}- \
		CONFIG_PREFIX=/rootfs \
		install
EOF

ARG LINUX_VERSION
ADD fetch/linux-${LINUX_VERSION}.tar.xz /
WORKDIR /linux-${LINUX_VERSION}
RUN --network=none <<-EOF
	make ARCH="$ARCH" headers
	find usr/include -name '.*' -delete
	rm usr/include/Makefile
	rm usr/include/headers_check.pl
	cp -Rv usr/include/* /rootfs/usr/include/
EOF

ARG GO_VERSION
ADD fetch/go${GO_VERSION}.src.tar.gz /
WORKDIR /go
RUN --network=none <<-EOF
	export GOROOT_BOOTSTRAP=/usr/lib/go
	export GOHOSTARCH=386
  export GOARCH=${TARGETARCH}
	env -C src bash -- make.bash
	rm -rf src/testdata
	mv bin/linux_${TARGETARCH}/* bin
	rm -rf bin/linux_${TARGETARCH}
	mkdir -p /rootfs/usr/lib/go /rootfs/usr/bin
	cp -a bin lib pkg src /rootfs/usr/lib/go
	ln -s /usr/lib/go/bin/go /rootfs/usr/bin/go
	ln -s /usr/lib/go/bin/gofmt /rootfs/usr/bin/gofmt
EOF

ARG BINUTILS_VERSION
ADD fetch/binutils-${BINUTILS_VERSION}.tar.xz /
WORKDIR /binutils-${BINUTILS_VERSION}
RUN --network=none <<-EOF
	./configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--prefix=/usr \
		--bindir=/usr/bin \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--sysconfdir=/etc \
		--disable-nls \
		--disable-multilib \
		--disable-plugins \
		--disable-gprofng \
		--enable-64-bit-bfd \
		--enable-ld=default \
		--enable-install-libiberty \
		--enable-deterministic-archives
	make
	make DESTDIR=/rootfs install
EOF

ARG GCC_VERSION
ARG GMP_VERSION
ARG MPFR_VERSION
ARG MPC_VERSION
ARG ISL_VERSION
ADD fetch/gcc-${GCC_VERSION}.tar.xz /
ADD fetch/gmp-${GMP_VERSION}.tar.bz2 /
ADD fetch/mpfr-${MPFR_VERSION}.tar.bz2 /
ADD fetch/mpc-${MPC_VERSION}.tar.gz /
ADD fetch/isl-${ISL_VERSION}.tar.bz2 /
WORKDIR /gcc-${GCC_VERSION}
RUN --network=none <<-EOF
	mv ../gmp-${GMP_VERSION} gmp
	mv ../mpfr-${MPFR_VERSION} mpfr
	mv ../mpc-${MPC_VERSION} mpc
	mv ../isl-${ISL_VERSION} isl
	./configure \
		--build=${BUILD} \
		--host=${TARGET} \
		--target=${TARGET} \
		--prefix=/usr \
		--mandir=/usr/share/man \
		--infodir=/usr/share/info \
		--libdir=/usr/lib \
		--disable-cet \
		--disable-fixed-point \
		--disable-libstdcxx-pch \
		--disable-multilib \
		--disable-libsanitizer \
		--disable-nls \
		--disable-werror \
		--enable-__cxa_atexit \
		--enable-default-pie \
		--enable-default-ssp \
		--enable-languages=c,c++ \
		--enable-link-serialization=2 \
		--enable-linker-build-id
	make
	make DESTDIR=/rootfs install
	mv /rootfs/usr/lib64/* /rootfs/usr/lib/
	rm -rf /rootfs/usr/lib64
EOF

ARG XZ_VERSION
ADD fetch/xz-${XZ_VERSION}.tar.gz /
WORKDIR /xz-${XZ_VERSION}
RUN --network=none <<-EOF
	autoreconf -fi
	./configure \
		--prefix=/usr \
		--host=${TARGET}
	make DESTDIR=/rootfs install
EOF

ARG LIBUCONTEXT_VERSION
ADD fetch/libucontext-${LIBUCONTEXT_VERSION}.tar.gz /
WORKDIR /libucontext-libucontext-${LIBUCONTEXT_VERSION}
RUN --network=none <<-EOF
	export CC=${ARCH}-linux-musl-gcc
	make ARCH=${ARCH} DESTDIR=/rootfs install
EOF

ARG LIBUNWIND_VERSION
ADD fetch/libunwind-${LIBUNWIND_VERSION}.tar.gz /
WORKDIR /libunwind-${LIBUNWIND_VERSION}
RUN <<-EOF
	set -eux
	export CFLAGS="-I/rootfs/usr/include -L/rootfs/usr/lib -L/usr/lib -L/lib -llzma -lucontext"
	export CXXFLAGS="$CFLAGS"
	export CPPFLAGS="$CFLAGS"
	autoreconf -i
	./configure \
		--prefix=/usr \
		--host=${TARGET} \
		--enable-cxx-exceptions
	make
	cp -a src/libunwind.* /rootfs/usr/lib/
EOF

ARG MUSL_VERSION
ADD fetch/musl-${MUSL_VERSION}.tar.gz /
WORKDIR /musl-${MUSL_VERSION}
RUN --network=none <<-EOF
	./configure \
		--prefix=/usr \
		--host=${TARGET}
	make DESTDIR=/rootfs install
	ln -sf /usr/lib/ld-musl-${ARCH}.so.1 /rootfs/usr/bin/ldd
	mv -f /rootfs/usr/lib/libc.so /rootfs/usr/lib/ld-musl-${ARCH}.so.1
	ln -sf ld-musl-${ARCH}.so.1 /rootfs/usr/lib/libc.musl-${ARCH}.so.1
	ln -sf /usr/lib/ld-musl-${ARCH}.so.1 /rootfs/usr/lib/libc.so
EOF

ARG PYTHON_VERSION
ADD fetch/python-${PYTHON_VERSION}.tar.xz /
WORKDIR /Python-${PYTHON_VERSION}
COPY <<-EOF config.site
ac_cv_file__dev_ptmx=no
ac_cv_file__dev_ptc=no
EOF
ENV CONFIG_SITE=config.site
RUN --network=none <<-EOF
	set -eux
	./configure \
		--prefix=/usr \
		--build=${BUILD} \
		--host=${TARGET} \
		--target=${TARGET} \
		--with-build-python \
		--with-computed-gotos \
		--without-ensurepip \
		--disable-ipv6 \
	make
	make DESTDIR=/rootfs install
	ln -s /usr/bin/python3 /rootfs/usr/bin/python
EOF

FROM scratch AS package
COPY --from=build /rootfs/ /
