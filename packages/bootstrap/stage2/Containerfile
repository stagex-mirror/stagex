FROM scratch AS build
ARG GCC_SOURCE
ARG GCC_VERSION
ARG LINUX_SOURCE
ARG LINUX_VERSION
ARG MUSL_SOURCE
ARG MUSL_VERSION
ARG BINUTILS_SOURCE
ARG BINUTILS_VERSION
ENV ARCH=x86_64
ENV TARGET=${ARCH}-linux-musl
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV SOURCE_DATE_EPOCH=1
ENV KCONFIG_NOTIMESTAMP=1
ENV SYSROOT=/opt/cross
ENV PATH=${SYSROOT}/bin:/usr/sbin:/usr/bin:/sbin:/bin
COPY --from=fetch . .
COPY --from=stagex/bootstrap-stage1 . /
RUN --network=none <<-EOF
	set -eux
	tar -xf ${LINUX_SOURCE}
	tar -xzf ${MUSL_SOURCE}
	tar -xf ${BINUTILS_SOURCE}
	tar -xf ${GCC_SOURCE}
	cd gcc-${GCC_VERSION}
	mv ../*.tar.* .; \
	./contrib/download_prerequisites
EOF

# Setup sysroot
WORKDIR ${SYSROOT}
RUN <<-EOF
	mkdir -pv bin lib lib32 include "${TARGET}/bin"
	ln -sfv . usr
EOF
WORKDIR ${SYSROOT}/${TARGET}
RUN <<-EOF
	ln -sfv ../lib lib
	ln -sfv ../lib32 lib32
	ln -sfv ../include include
EOF

# Install musl headers
WORKDIR /musl-${MUSL_VERSION}
RUN --network=none \
	make \
		ARCH="${ARCH}" \
		prefix="" \
		DESTDIR="${SYSROOT}" \
		install-headers

# Build and install cross binutils
WORKDIR /build-binutils
RUN --network=none <<-EOF
	set -eux
	/binutils-${BINUTILS_VERSION}/configure \
		--target="${TARGET}" \
		--prefix="" \
		--exec-prefix="" \
		--sbindir=/bin \
		--libexecdir=/lib \
		--datarootdir=/_tmp \
		--with-sysroot=/ \
		--with-build-sysroot="${SYSROOT}" \
		--disable-nls \
		--disable-multilib \
		--disable-plugins \
		--disable-gprofng \
		--enable-64-bit-bfd \
		--enable-ld=default \
		--enable-install-libiberty \
		--enable-deterministic-archives
	make -j$(nproc) all-binutils all-gas all-ld
	make \
		DESTDIR="${SYSROOT}" \
		install-strip-binutils \
		install-strip-gas \
		install-strip-ld
EOF

# Build and install cross gcc and bootstrap libgcc
WORKDIR /build-gcc
RUN --network=none <<-EOF
	set -eux
	/gcc-${GCC_VERSION}/configure \
	--prefix="" \
	--exec-prefix="" \
	--sbindir=/bin \
	--libexecdir=/lib \
	--datarootdir=/_tmp \
	--target=${TARGET} \
	--disable-multilib \
	--disable-bootstrap \
	--disable-assembly \
	--disable-libmudflap \
	--disable-libsanitizer \
	--disable-gnu-indirect-function \
	--disable-libmpx \
	--disable-werror \
	--enable-languages=c,c++ \
	--enable-tls \
	--enable-initfini-array \
	--enable-libstdcxx-time=rt \
	--enable-deterministic-archives \
	--with-build-sysroot=${SYSROOT} \
	--with-sysroot=/
	make -j$(nproc) \
		all-gcc
	make -j$(nproc) \
		enable_shared=no \
		all-target-libgcc
	make \
		DESTDIR="${SYSROOT}" \
		install-strip-gcc \
		install-strip-target-libgcc
EOF

# Build and install cross musl
WORKDIR /build-musl
RUN --network=none <<-EOF
	ARCH="${ARCH}" \
  CC="${TARGET}-gcc" \
  CROSS_COMPILE="${TARGET}-" \
  LIBCC="${SYSROOT}/lib/gcc/${TARGET}/${GCC_VERSION}/libgcc.a" \
	/musl-${MUSL_VERSION}/configure \
		--host="${TARGET}" \
		--prefix="" \
		--disable-wrapper
	make \
		AR="${TARGET}-ar" \
		RANLIB="${TARGET}-ranlib"
	make \
		AR="${TARGET}-ar" \
		RANLIB="${TARGET}-ranlib" \
		DESTDIR="${SYSROOT}" \
		install-libs
	rm -f "${SYSROOT}"/lib/ld-musl-${ARCH}.so.1
	cp -af \
		"${SYSROOT}/usr/lib/libc.so" \
		"${SYSROOT}/lib/ld-musl-${ARCH}.so.1"
EOF

# Build and install final libgcc/libstdc++
WORKDIR /build-gcc
RUN --network=none <<-EOF
	make -C "${TARGET}/libgcc" distclean
	make \
		enable_shared=yes \
		all-target-libgcc \
		all-target-libstdc++-v3
	make \
		DESTDIR="${SYSROOT}" \
		install-strip-target-libgcc \
		install-strip-target-libstdc++-v3
EOF

# Build and install linux headers
WORKDIR /linux-${LINUX_VERSION}
RUN --network=none <<-EOF
	set -eux
	make ARCH="${ARCH}" headers
	find usr/include ! -name '*.h' -type f -delete
	cp -af usr/include "${SYSROOT}/usr"
	cp -Rv usr/include/* "${SYSROOT}/include/"
EOF
RUN rm -rf "${SYSROOT}/_tmp"

WORKDIR /rootfs/${SYSROOT}
RUN <<-EOF
	mv ${SYSROOT}/* .
	mkdir -p /rootfs/usr/bin
	for bin_path in $(find bin -name ${TARGET}-*); do
		bin_name=$(basename "$bin_path")
		ln -s /opt/cross/bin/${bin_name} /rootfs/usr/bin/${bin_name}
	done
EOF

FROM scratch AS package
COPY --from=build /rootfs/ /
