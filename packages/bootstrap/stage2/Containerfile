FROM stagex/bootstrap-stage1 AS build
ENV PATH=/rootfs/usr/bin:$PATH
ENV LD_LIBRARY_PATH=/rootfs/usr/lib:/usr/lib:/lib
ENV CFLAGS="-L/rootfs/usr/lib -L/usr/lib -L/lib"
ENV CXXFLAGS="$CFLAGS"
ENV HOST=i386-linux-musl

ARG XZ_VERSION
ADD fetch/xz-${XZ_VERSION}.tar.gz /
WORKDIR /xz-${XZ_VERSION}
RUN --network=none <<-EOF
	set -eux
	autoreconf -fi
	./configure --prefix=/usr
	make DESTDIR=/rootfs install
EOF

ARG LIBUCONTEXT_VERSION
ADD fetch/libucontext-${LIBUCONTEXT_VERSION}.tar.gz /
WORKDIR /libucontext-libucontext-${LIBUCONTEXT_VERSION}
RUN --network=none <<-EOF
	set -eux
	make ARCH=x86 -j$(nproc)
	make ARCH=x86 DESTDIR=/rootfs install
EOF

ARG LIBUNWIND_VERSION
ADD fetch/libunwind-${LIBUNWIND_VERSION}.tar.gz /
WORKDIR /libunwind-${LIBUNWIND_VERSION}
RUN <<-EOF
	set -eux
	export CFLAGS="$CFLAGS -llzma -latomic -lucontext"
	autoreconf -i
	./configure \
		--prefix=/usr \
		--host=${HOST} \
		--enable-cxx-exceptions
	make -j$(nproc)
	cp -a src/libunwind.* /rootfs/usr/lib/
EOF

ARG CMAKE_VERSION
ADD fetch/cmake-${CMAKE_VERSION}.tar.gz /
WORKDIR /cmake-${CMAKE_VERSION}/build
RUN --network=none <<-EOF
	set -eux
	export CXXFLAGS="-latomic"
	../configure \
		--prefix=/usr \
		--no-system-cppdap \
		--no-system-curl \
		-- \
		-DCMAKE_USE_OPENSSL=OFF
	make -j$(nproc)
	make DESTDIR=/rootfs install
EOF

ARG LLVM_VERSION
ADD fetch/llvm-${LLVM_VERSION}.tar.xz /
WORKDIR /llvm-project-${LLVM_VERSION}.src
RUN --network=none <<-EOF
	set -eux
	cmake \
		-B build \
		-S llvm \
		-Wno-dev \
		-DCMAKE_INSTALL_PREFIX=/usr/ \
		-DCMAKE_BUILD_TYPE=Release \
		-DLLVM_TARGETS_TO_BUILD="X86" \
		-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" \
		-DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" \
		-DLLVM_BUILD_DOCS=OFF
	cmake --build build --parallel $(nproc)
	DESTDIR="/rootfs" cmake --install build
EOF

FROM stagex/bootstrap-stage1 AS package
COPY --from=build /rootfs/ /
RUN <<-'EOF'
	cd /usr/bin
	rm -rf ld cc c++ ar ranlib objdump
	ln -s lld ld
	ln -s clang cc
	ln -s clang++ c++
	ln -s llvm-ar ar
	ln -s llvm-ranlib ranlib
EOF
ENV PATH=/usr/sbin:/usr/bin:/sbin:/bin
ENV CC=/usr/bin/clang
ENV CXX=/usr/bin/clang++
ENV AR=/usr/bin/llvm-ar
ENV RANLIB=/usr/bin/llvm-ranlib
ENV READELF=/usr/bin/llvm-readelf
ENV OBJDUMP=/usr/bin/llvm-objdump
COPY <<-'EOF' /etc/profile
	[[ "$TARGETARCH" == "amd64" ]] && ARCH="x86_64"
	[[ "$TARGETARCH" == "arm64" ]] && ARCH="aarch64"
	export ARCH
	export TARGET=${ARCH}-unknown-linux-musl
	export MAKEFLAGS="-j$(nproc)"
EOF
SHELL ["/bin/sh","-l","-c"]
