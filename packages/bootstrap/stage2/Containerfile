FROM scratch AS build
ARG GCC_SOURCE
ARG GCC_VERSION
ARG LINUX_SOURCE
ARG LINUX_VERSION
ARG MUSL_SOURCE
ARG MUSL_VERSION
ARG BUSYBOX_SOURCE
ARG BUSYBOX_VERSION
ARG BINUTILS_SOURCE
ARG BINUTILS_VERSION
ENV TARGET_ARCH=x86_64
ENV HOST_ARCH=i386
ENV BUILD=${HOST_ARCH}-unknown-linux-musl
ENV HOST=${HOST_ARCH}-unknown-linux-musl
ENV TARGET=${TARGET_ARCH}-linux-musl
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV USER=user
ENV HOME=/home/${USER}
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV SOURCE_DATE_EPOCH=1
ENV KCONFIG_NOTIMESTAMP=1
ENV SYSROOT_DIR=${HOME}/build-sysroot
ENV GCC_DIR=${HOME}/build-gcc
ENV LINUX_DIR=${HOME}/build-linux
ENV BINUTILS_DIR=${HOME}/build-binutils
ENV MUSL_DIR=${HOME}/build-musl
WORKDIR /${HOME}
COPY --from=fetch . .
COPY --from=stagex/bootstrap-stage1 . /
RUN --network=none <<-EOF
    set -eux
    tar -xf ${LINUX_SOURCE}
    tar -xzf ${MUSL_SOURCE}
    tar -xf ${BINUTILS_SOURCE}
    tar -xf ${GCC_SOURCE}
    cd gcc-${GCC_VERSION}
    mv ../*.tar.* .; \
    ./contrib/download_prerequisites
EOF

# Phase 1: Build cross binutils in build-binutils
WORKDIR /${BINUTILS_DIR}
RUN --network=none <<-EOF
    set -eux
    ../binutils-${BINUTILS_VERSION}/configure \
        --build=${BUILD} \
        --host=${HOST} \
        --target=${TARGET} \
        --with-sysroot=/${TARGET} \
        --prefix= \
        --libdir=/lib \
        --disable-nls \
        --disable-multilib \
        --disable-plugins \
        --disable-gprofng \
        --enable-64-bit-bfd \
        --enable-ld=default \
        --enable-install-libiberty \
        --enable-deterministic-archives
    make all
EOF

# Phase 2: Prepare build sysroot
WORKDIR /${SYSROOT_DIR}
RUN <<-EOF
    set -eux
    mkdir -p include
    ln -sf . usr
    ln -sf lib lib32
    ln -sf lib lib64
EOF

# Phase 3: Build gcc (without libgcc) in build-gcc
WORKDIR /${GCC_DIR}
RUN --network=none <<-EOF
    set -eux
    ../gcc-${GCC_VERSION}/configure \
        --build=${BUILD} \
        --host=${HOST} \
        --target=${TARGET} \
        --with-build-sysroot=${SYSROOT_DIR} \
        --with-sysroot=/${TARGET} \
        --prefix= \
        --libdir=/lib \
        --disable-multilib \
        --disable-bootstrap \
        --disable-assembly \
        --disable-libmudflap \
        --disable-libsanitizer \
        --disable-gnu-indirect-function \
        --disable-libmpx \
        --disable-werror \
        --enable-languages=c,c++ \
        --enable-tls \
        --enable-initfini-array \
        --enable-libstdcxx-time=rt \
        --enable-deterministic-archives \
        AR_FOR_TARGET=${BINUTILS_DIR}/binutils/ar \
        AS_FOR_TARGET=${BINUTILS_DIR}/gas/as-new \
        LD_FOR_TARGET=${BINUTILS_DIR}/ld/ld-new \
        NM_FOR_TARGET=${BINUTILS_DIR}/binutils/nm-new \
        OBJCOPY_FOR_TARGET=${BINUTILS_DIR}/binutils/objcopy \
        OBJDUMP_FOR_TARGET=${BINUTILS_DIR}/binutils/objdump \
        RANLIB_FOR_TARGET=${BINUTILS_DIR}/binutils/ranlib \
        READELF_FOR_TARGET=${BINUTILS_DIR}/binutils/readelf \
        STRIP_FOR_TARGET=${BINUTILS_DIR}/binutils/strip-new
    make all-gcc
EOF

# Phase 4: Install musl libc headers to build-sysroot for use by libgcc
WORKDIR /${MUSL_DIR}
RUN --network=none <<-EOF
    set -eux
    ../musl-${MUSL_VERSION}/configure \
        CC="${GCC_DIR}/gcc/xgcc -B ${GCC_DIR}/gcc" \
        LIBCC="${GCC_DIR}/${TARGET}/libgcc/libgcc.a" \
        --prefix= \
        --host=${TARGET}
    make DESTDIR=${SYSROOT_DIR} install-headers
EOF

# Phase 5: Compile libgcc
WORKDIR /${GCC_DIR}
RUN --network=none make MAKE="make enable_shared=no" all-target-libgcc

# Phase 5: Compile musl libc and install to sysroot
WORKDIR /${MUSL_DIR}
RUN --network=none <<-EOF
    set -eux
    make \
        AR=${BINUTILS_DIR}/binutils/ar \
        RANLIB=${BINUTILS_DIR}/binutils/ranlib
    make DESTDIR=${SYSROOT_DIR} install
EOF

# Phase 6: Compile remaining gcc targets
WORKDIR /${GCC_DIR}
RUN make all

# Phase 7: Generate linux headers
WORKDIR /${HOME}/linux-${LINUX_VERSION}
RUN --network=none <<-EOF
    set -eux
    make ARCH=${TARGET_ARCH} headers
    find usr/include -name '.*' -delete
    rm usr/include/Makefile
    rm usr/include/headers_check.pl
    cp -rv usr/include ${LINUX_DIR}
EOF
WORKDIR /${HOME}
COPY --from=stagex/bootstrap-stage1 . /rootfs/
RUN <<-EOF
    set -eux
    rm /rootfs/lib
    env -C build-musl make DESTDIR=/rootfs/${TARGET} install
    env -C build-gcc make DESTDIR=/rootfs/ install
    env -C build-binutils make DESTDIR=/rootfs/ install
    cp -Rv ${LINUX_DIR}/* /rootfs/${TARGET}/include
    ln -s /usr/lib/ld-musl-${HOST_ARCH}.so.1 /rootfs/lib/libc.so
    ln -s /usr/lib/ld-musl-${HOST_ARCH}.so.1 /rootfs/lib/ld-musl-${HOST_ARCH}.so.1
    ln -s /${TARGET}/lib/ld-musl-${TARGET_ARCH}.so.1 /rootfs/lib/ld-musl-${TARGET_ARCH}.so.1
EOF

FROM scratch AS package
COPY --from=build /rootfs/ /
USER 1000:1000
ENTRYPOINT ["/bin/bash"]
ENV PS1="stage2 $ "
